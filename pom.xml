<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.redhat.ticketmonster</groupId>
  <artifactId>ticket-monster-admin</artifactId>
  <version>2.0-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>ticket-monster-admin</name>
  <description>The admin backend for a microservices ticketmonster deployment</description>


  <properties>

    <hibernate.version>5.1.3.Final</hibernate.version>
    <!-- Explicitly declaring the source encoding eliminates the following
        message: -->
    <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
        resources, i.e. build is platform dependent! -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- Timestamp format for the maven.build.timestamp property -->
    <!-- You can reference property in pom.xml or filtered resources
        (must enable third-party plugin if using Maven < 2.1) -->
    <maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>
    <!-- Specify the JBoss EAP directory to be the JBOSS_HOME environment
        variable -->
    <!-- Define the version of JBoss' Java EE APIs and Tools we want
        to import. -->
    <!-- <jboss.bom.version>1.0.4.Final-redhat-9</jboss.bom.version> -->
    <!-- Alternatively, comment out the above line, and un-comment the
        line below to use version 1.0.4.Final-redhat-9 which is a release certified
        to work with JBoss EAP 7. It requires you have access to the JBoss EAP 7
        maven repository. -->
    <version.surefire.plugin>2.10</version.surefire.plugin>
    <buildhelper.plugin.version>1.7</buildhelper.plugin.version>

    <wildfly.swarm.version>1.0.0.CR1</wildfly.swarm.version>
    <!--<wildfly.swarm.version>1.0.2.Final</wildfly.swarm.version>-->
    <fabric8.maven.plugin.version>3.1.28</fabric8.maven.plugin.version>

    <docker.from>fabric8/java-jboss-openjdk8-jdk:1.0.13</docker.from>
    <fabric8.dockerUser>fabric8/</fabric8.dockerUser>
    <docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.wildfly.swarm</groupId>
        <artifactId>bom</artifactId>
        <version>${wildfly.swarm.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.jboss.spec</groupId>
        <artifactId>jboss-javaee-6.0</artifactId>
        <version>3.0.3.Final</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>


    <!-- Import the Common Annotations API (JSR-250), we use provided
    scope as the API is included in JBoss EAP -->
    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JAX-RS API, we use provided scope as the API is included
        in JBoss EAP -->
    <dependency>
      <groupId>org.jboss.spec.javax.ws.rs</groupId>
      <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JPA API, we use provided scope as the API is included
        in JBoss EAP -->
    <dependency>
      <groupId>org.hibernate.javax.persistence</groupId>
      <artifactId>hibernate-jpa-2.0-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the EJB API, we use provided scope as the API is included
        in JBoss EAP -->
    <dependency>
      <groupId>org.jboss.spec.javax.ejb</groupId>
      <artifactId>jboss-ejb-api_3.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the Servlet API, we use provided scope as the API is
        included in JBoss EAP -->
    <dependency>
      <groupId>org.jboss.spec.javax.servlet</groupId>
      <artifactId>jboss-servlet-api_3.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.spec.javax.interceptor</groupId>
      <artifactId>jboss-interceptors-api_1.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.spec.javax.faces</groupId>
      <artifactId>jboss-jsf-api_2.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the CDI API, we use provided scope as the API is included
        in JBoss EAP -->
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>${hibernate.version}</version>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Now we declare any tools needed -->

    <!-- Annotation processor to generate the JPA 2.0 metamodel classes
        for typesafe criteria queries -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-jpamodelgen</artifactId>
      <version>4.3.10.Final</version>
      <scope>provided</scope>
    </dependency>

    <!-- Needed for running tests (you may also use TestNG) -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <!-- Optional, but highly recommended -->
    <!-- Arquillian allows you to test enterprise code such as EJBs and
        Transactional(JTA) JPA from JUnit/TestNG -->
    <dependency>
      <groupId>org.jboss.arquillian.junit</groupId>
      <artifactId>arquillian-junit-container</artifactId>
      <version>1.1.7.Final</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.protocol</groupId>
      <artifactId>arquillian-protocol-servlet</artifactId>
      <version>1.1.7.Final</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.shrinkwrap.resolver</groupId>
      <artifactId>shrinkwrap-resolver-depchain</artifactId>
      <version>2.0.0</version>
      <type>pom</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.wildfly.swarm</groupId>
      <artifactId>jaxrs-cdi</artifactId>
    </dependency>



  </dependencies>

  <build>
    <!-- Maven will append the version to the finalName (which is the
   name given to the generated war, and hence the context root) -->
    <finalName>${project.artifactId}</finalName>
    <pluginManagement>

      <plugins>
        <!-- Compiler plugin enforces Java 1.8 compatibility and activates
      annotation processors -->
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>2.3.1</version>
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>2.1.1</version>
          <configuration>
            <failOnMissingWebXml>false</failOnMissingWebXml>
            <archive>
              <manifestEntries>
                <Dependencies>org.jboss.as.naming,org.jboss.as.server,org.jboss.msc</Dependencies>
              </manifestEntries>
            </archive>
          </configuration>
        </plugin>

      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>fabric8-maven-plugin</artifactId>
        <version>${fabric8.maven.plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>resource</goal>
            </goals>
          </execution>
        </executions>
        <configuration>

          <images>
            <image>
              <name>${docker.image}</name>
              <build>
                <from>${docker.from}</from>
                <ports>
                  <port>8080</port>
                </ports>
                <assembly>
                  <basedir>/app</basedir>
                  <inline>
                    <id>${project.artifactId}</id>
                    <files>
                      <file>
                        <source>${project.build.directory}/${project.build.finalName}-swarm.jar</source>
                        <outputDirectory>/</outputDirectory>
                      </file>
                    </files>
                  </inline>
                </assembly>
                <env>
                  <JAVA_APP_JAR>${project.build.finalName}-swarm.jar</JAVA_APP_JAR>
                </env>
              </build>
            </image>
          </images>
          <resources>
            <services>
              <service>
                <name>tm-admin</name>
                <ports>
                  <port>
                    <protocol>TCP</protocol>
                    <port>80</port>
                    <name>wildfly-swarm</name>
                    <targetPort>8080</targetPort>
                  </port>
                </ports>
              </service>
            </services>
          </resources>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.wildfly.swarm</groupId>
        <artifactId>wildfly-swarm-plugin</artifactId>
        <version>${wildfly.swarm.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>package</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>


  <!-- Activate JBoss Product Maven repository.

      NOTE: Configuring the Maven repository in the pom.xml file is not a recommended procedure
      and is only done here to make it easier to use the quickstarts.

      For more information about how to configure Maven for your application,
      see the section entitled 'Use the Maven Repository'
      in the Development Guide for Red Hat JBoss Enterprise Application Platform located here:

      https://access.redhat.com/documentation/en-US/JBoss_Enterprise_Application_Platform/
  -->
  <repositories>
    <repository>
      <id>jboss-developer-staging-repository</id>
      <url>http://jboss-developer.github.io/temp-maven-repo/</url>
      <releases>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>redhat-ga-repository</id>
      <url>https://maven.repository.redhat.com/ga/</url>
      <releases>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>jboss-developer-staging-repository</id>
      <url>http://jboss-developer.github.io/temp-maven-repo/</url>
      <releases>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
    <pluginRepository>
      <id>redhat-ga-repository</id>
      <url>https://maven.repository.redhat.com/ga/</url>
      <releases>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <profiles>
    <profile>
      <!-- The default profile skips all tests, though you can tune
          it to run just unit tests based on a custom pattern -->
      <!-- Seperate profiles are provided for running all tests, including
          Arquillian tests that execute in the specified container -->
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>${version.surefire.plugin}</version>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>org.wildfly.swarm</groupId>
          <artifactId>jpa</artifactId>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <!-- An optional profile that enables a server managed postgresql data source-->
      <id>postgresql</id>
      <build>
        <resources>
          <resource>
            <directory>src/main/resources-postgresql</directory>
          </resource>
          <resource>
            <directory>src/main/resources</directory>
            <includes>
              <include>**/*</include>
            </includes>
            <excludes>
              <exclude>META-INF/*</exclude>
            </excludes>
          </resource>
        </resources>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>${version.surefire.plugin}</version>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>org.wildfly.swarm</groupId>
          <artifactId>jpa-postgresql</artifactId>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <!-- An optional profile that enables a server managed mysql data source-->
      <id>mysql</id>
      <build>
        <resources>
          <resource>
            <directory>src/main/resources-mysql</directory>
          </resource>
          <resource>
            <directory>src/main/resources</directory>
            <includes>
              <include>**/*</include>
            </includes>
            <excludes>
              <exclude>META-INF/*</exclude>
            </excludes>
          </resource>
        </resources>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>${version.surefire.plugin}</version>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.6</version>
            <configuration>
              <packagingExcludes>WEB-INF/ticket-monster-ds.xml</packagingExcludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>org.wildfly.swarm</groupId>
          <artifactId>jpa-mysql</artifactId>
          <version>1.0.0.CR3</version>
        </dependency>
      </dependencies>
    </profile>


    <!-- fabric8 profiles -->
    <profile>
      <id>f8-build</id>
      <build>
        <defaultGoal>clean install docker:build fabric8:json</defaultGoal>
      </build>
    </profile>
    <profile>
      <id>f8-deploy</id>
      <properties>
        <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
        <fabric8.recreate>true</fabric8.recreate>
      </properties>
      <build>
        <defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
      </build>
    </profile>
    <profile>
      <id>f8-local-deploy</id>
      <properties>
        <fabric8.recreate>true</fabric8.recreate>
      </properties>
      <build>
        <defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
      </build>
    </profile>
  </profiles>
</project>
